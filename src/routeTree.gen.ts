/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as SignUpIndexImport } from "./routes/sign-up/index";
import { Route as LogInIndexImport } from "./routes/log-in/index";
import { Route as authLayoutImport } from "./routes/(auth)/_layout";
import { Route as authLayoutIndexImport } from "./routes/(auth)/_layout/index";
import { Route as authLayoutCompetitorWatchImport } from "./routes/(auth)/_layout/competitor-watch";

// Create Virtual Routes

const authImport = createFileRoute("/(auth)")();

// Create/Update Routes

const authRoute = authImport.update({
  id: "/(auth)",
  getParentRoute: () => rootRoute,
} as any);

const SignUpIndexRoute = SignUpIndexImport.update({
  path: "/sign-up/",
  getParentRoute: () => rootRoute,
} as any);

const LogInIndexRoute = LogInIndexImport.update({
  path: "/log-in/",
  getParentRoute: () => rootRoute,
} as any);

const authLayoutRoute = authLayoutImport.update({
  id: "/_layout",
  getParentRoute: () => authRoute,
} as any);

const authLayoutIndexRoute = authLayoutIndexImport.update({
  path: "/",
  getParentRoute: () => authLayoutRoute,
} as any);

const authLayoutCompetitorWatchRoute = authLayoutCompetitorWatchImport.update({
  path: "/competitor-watch",
  getParentRoute: () => authLayoutRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/(auth)": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof authImport;
      parentRoute: typeof rootRoute;
    };
    "/(auth)/_layout": {
      id: "/_layout";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof authLayoutImport;
      parentRoute: typeof authRoute;
    };
    "/log-in/": {
      id: "/log-in/";
      path: "/log-in";
      fullPath: "/log-in";
      preLoaderRoute: typeof LogInIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/sign-up/": {
      id: "/sign-up/";
      path: "/sign-up";
      fullPath: "/sign-up";
      preLoaderRoute: typeof SignUpIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/(auth)/_layout/competitor-watch": {
      id: "/_layout/competitor-watch";
      path: "/competitor-watch";
      fullPath: "/competitor-watch";
      preLoaderRoute: typeof authLayoutCompetitorWatchImport;
      parentRoute: typeof authLayoutImport;
    };
    "/(auth)/_layout/": {
      id: "/_layout/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof authLayoutIndexImport;
      parentRoute: typeof authLayoutImport;
    };
  }
}

// Create and export the route tree

interface authLayoutRouteChildren {
  authLayoutCompetitorWatchRoute: typeof authLayoutCompetitorWatchRoute;
  authLayoutIndexRoute: typeof authLayoutIndexRoute;
}

const authLayoutRouteChildren: authLayoutRouteChildren = {
  authLayoutCompetitorWatchRoute: authLayoutCompetitorWatchRoute,
  authLayoutIndexRoute: authLayoutIndexRoute,
};

const authLayoutRouteWithChildren = authLayoutRoute._addFileChildren(
  authLayoutRouteChildren
);

interface authRouteChildren {
  authLayoutRoute: typeof authLayoutRouteWithChildren;
}

const authRouteChildren: authRouteChildren = {
  authLayoutRoute: authLayoutRouteWithChildren,
};

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren);

export interface FileRoutesByFullPath {
  "/": typeof authLayoutIndexRoute;
  "/log-in": typeof LogInIndexRoute;
  "/sign-up": typeof SignUpIndexRoute;
  "/competitor-watch": typeof authLayoutCompetitorWatchRoute;
}

export interface FileRoutesByTo {
  "/log-in": typeof LogInIndexRoute;
  "/sign-up": typeof SignUpIndexRoute;
  "/competitor-watch": typeof authLayoutCompetitorWatchRoute;
  "/": typeof authLayoutIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof authRouteWithChildren;
  "/_layout": typeof authLayoutRouteWithChildren;
  "/log-in/": typeof LogInIndexRoute;
  "/sign-up/": typeof SignUpIndexRoute;
  "/_layout/competitor-watch": typeof authLayoutCompetitorWatchRoute;
  "/_layout/": typeof authLayoutIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/log-in" | "/sign-up" | "/competitor-watch";
  fileRoutesByTo: FileRoutesByTo;
  to: "/log-in" | "/sign-up" | "/competitor-watch" | "/";
  id:
    | "__root__"
    | "/"
    | "/_layout"
    | "/log-in/"
    | "/sign-up/"
    | "/_layout/competitor-watch"
    | "/_layout/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  authRoute: typeof authRouteWithChildren;
  LogInIndexRoute: typeof LogInIndexRoute;
  SignUpIndexRoute: typeof SignUpIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  authRoute: authRouteWithChildren,
  LogInIndexRoute: LogInIndexRoute,
  SignUpIndexRoute: SignUpIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/log-in/",
        "/sign-up/"
      ]
    },
    "/": {
      "filePath": "(auth)",
      "children": [
        "/_layout"
      ]
    },
    "/_layout": {
      "filePath": "(auth)/_layout.tsx",
      "parent": "/",
      "children": [
        "/_layout/competitor-watch",
        "/_layout/"
      ]
    },
    "/log-in/": {
      "filePath": "log-in/index.tsx"
    },
    "/sign-up/": {
      "filePath": "sign-up/index.tsx"
    },
    "/_layout/competitor-watch": {
      "filePath": "(auth)/_layout/competitor-watch.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "(auth)/_layout/index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
